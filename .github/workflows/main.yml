name: Main Branch CI/CD to Dev

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run tests
      run: ./gradlew test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: "[Report] JUnit Tests Report"
        path: build/test-results/test/*.xml
        reporter: java-junit

  sonar:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarCloudÈúÄË¶ÅÂÆåÊï¥ÁöÑGitÂéÜÂè≤

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build and analyze with SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: ./gradlew build sonar --info

  deploy-dev:
    needs: [test, sonar]
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build application
      run: ./gradlew build -x test

    - name: Install Railway CLI
      if: github.event_name != 'pull_request'
      run: npm install -g @railway/cli

    - name: Deploy to Railway App Service
      run: |
        echo "Starting deployment to Railway with dev profile..."
        echo "Setting Spring Boot active profile to 'dev'"
        
        # Set environment variable for Spring Boot profile
        railway variables set SPRING_PROFILES_ACTIVE=dev --service ${{ secrets.RAILWAY_SERVICE_ID }}
        
        # Verify the environment variable was set
        echo "Verifying environment variables..."
        railway variables --service ${{ secrets.RAILWAY_SERVICE_ID }} || echo "Could not list variables"
        
        # Deploy the service
        railway up --service ${{ secrets.RAILWAY_SERVICE_ID }}
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
        
    - name: Health Check
      run: |
        echo "Starting real health check (5 minutes max)..."
        
        # Get the service URL from Railway
        echo "Getting service URL..."
        SERVICE_URL=$(railway domain list --service ${{ secrets.RAILWAY_SERVICE_ID }} | head -n 1 | awk '{print $1}' || echo "")
        
        if [ -z "$SERVICE_URL" ]; then
          echo "‚ö†Ô∏è  Could not get service URL from Railway, trying alternative method..."
          SERVICE_URL="https://$(railway vars --service ${{ secrets.RAILWAY_SERVICE_ID }} | grep RAILWAY_PUBLIC_DOMAIN | cut -d '=' -f2 || echo "")"
        fi
        
        if [ -z "$SERVICE_URL" ] || [ "$SERVICE_URL" = "https://" ]; then
          echo "‚ùå Could not determine service URL, skipping health check"
          echo "‚úÖ Railway deployment completed - manual verification required"
          exit 0
        fi
        
        echo "Service URL: $SERVICE_URL"
        
        # Health check configuration
        TIMEOUT=300          # 5 minutes maximum
        ELAPSED=0
        SLEEP_INTERVAL=20    # Check every 20 seconds
        INITIAL_WAIT=30      # Wait 30 seconds before first check
        
        echo "Waiting ${INITIAL_WAIT} seconds for service to start..."
        sleep $INITIAL_WAIT
        
        echo "Starting health check polling (max ${TIMEOUT}s)..."
        
        while [ $ELAPSED -lt $TIMEOUT ]; do
          ATTEMPT=$((ELAPSED/SLEEP_INTERVAL + 1))
          echo ""
          echo "=== Health Check Attempt $ATTEMPT (${ELAPSED}s elapsed) ==="
          
          # Try actuator health endpoint first
          echo "üîç Testing actuator health: ${SERVICE_URL}/actuator/health"
          if curl -s -f --connect-timeout 10 --max-time 20 "${SERVICE_URL}/actuator/health" > /dev/null 2>&1; then
            echo "‚úÖ Actuator health check passed!"
            curl -s "${SERVICE_URL}/actuator/health" | head -5
            echo ""
            echo "üéâ Service is healthy and responding!"
            exit 0
          else
            echo "‚ùå Actuator endpoint not responding"
          fi
          
          # Fallback: try root endpoint
          echo "üîç Testing root endpoint: ${SERVICE_URL}/"
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null --connect-timeout 10 --max-time 20 "${SERVICE_URL}/" 2>/dev/null || echo "000")
          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 400 ]; then
            echo "‚úÖ Service responding with HTTP $HTTP_CODE"
            echo "üéâ Service is up and running!"
            exit 0
          else
            echo "‚ùå Service not responding (HTTP: $HTTP_CODE)"
          fi
          
          echo "‚è≥ Waiting ${SLEEP_INTERVAL}s before next attempt..."
          sleep $SLEEP_INTERVAL
          ELAPSED=$((ELAPSED + SLEEP_INTERVAL))
        done
        
        echo ""
        echo "‚ùå Health check failed after ${TIMEOUT} seconds"
        echo "Service URL: $SERVICE_URL"
        echo "Please check Railway deployment logs for issues"
        exit 1
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}